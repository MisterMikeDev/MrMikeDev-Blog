---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<style>
			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
			}
			.hero-image {
				width: 100%;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
			}
			.prose {
				width: 850px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em;
				color: rgb(var(--gray-dark));
			}
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--gray));
			}
			.last-updated-on {
				font-style: italic;
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article id="post">
				<div class="hero-image">
					{heroImage && <img width={1020} height={510} src={heroImage} alt="" id="view" />}
				</div>
				<div class="prose">
					<div class="title">
						<div class="date">
							<FormattedDate date={pubDate} />
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
						</div>
						<h1>{title}</h1>
						<hr />
					</div>
					<slot />
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>
<script>
	enum LANGS {
		html = "HTML",
		css = "CSS",
		json = "JSON",
		js = "JavaScript",
		ts = "TypeScript",
		jsx = "React",
		tsx = "ReactTypeScript",
		bash = "Bash",
		sql = "SQL",
		md = "Markdown",
		astro = "Astro",
		yaml = "Yaml",
		unknown = "Unknown"
	}

	const postContent = document.querySelector(".prose");

	const postContentChildrens = postContent?.childNodes;
	
	const childrenArray = [] as ChildNode[];

	const codeCouples = [] as Array<{
		lang: number;
		code: number;
	}>

	postContentChildrens?.forEach(el => 
		childrenArray.push(el)
	)

	childrenArray?.forEach((el, index) => {
		if (el.nodeName === "PRE") {
			codeCouples.push({
				lang: index - 2,
				code: index
			})
		}
	})

	codeCouples.forEach(couple => {
		const lang = childrenArray[couple.lang];
		const code = childrenArray[couple.code];
		const langText = lang.textContent as string;
		lang.remove()
		if (typeof langText === "string") {
			const icon = LANGS[langText as keyof typeof LANGS]  || LANGS.unknown;
			const iconPath = `/icons/${icon}.svg`
			const iconImg = document.createElement("img")
			iconImg.src = iconPath
			iconImg.alt = `Icon from ${icon} lang for the code.`
			iconImg.draggable = false
			iconImg.style.position = "absolute";
			iconImg.style.top = "0.5rem";
			iconImg.style.right = "0.5rem";
			iconImg.style.width = "3rem";
			iconImg.style.height = "auto";
			code.appendChild(iconImg)
		}
	})
</script>
